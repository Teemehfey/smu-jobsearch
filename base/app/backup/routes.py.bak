import json
from flask import render_template, flash, redirect, url_for, request
from app import app, db
from app.forms import LoginForm, RegistrationForm, JobPostForm, EditListingForm, DeleteListingBtn, ApplyJobBtn, EditProfileForm, AcceptApplicationBtn, RejectApplicationBtn
from flask_login import current_user, login_user, logout_user,login_required
from app.models import User, JobPost, Application
from werkzeug.urls import url_parse
from wtforms.validators import ValidationError

@app.route('/weisheng',methods=['GET','POST'])
def weisheng():
    messages = False
    if current_user.is_authenticated:
        return redirect(url_for('index_reg'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is None or not user.check_password(form.password.data):
            # flash('Invalid username or password')
            messages = True
            return render_template('login2.html', title='Sign In', form=form, messages=messages)
        login_user(user)
        if user.role == 'regular':
            return redirect(url_for('index_reg'))
        elif user.role == 'admin':
            return redirect(url_for('index_admin'))

    return render_template('login2.html', title='Sign In', form=form)

@app.route('/weisheng2', methods=['GET', 'POST'])
def weisheng2():
    not_smu_email = False
    if current_user.is_authenticated:
        return redirect(url_for('index_reg'))
    form = RegistrationForm()
    if form.validate_on_submit():
        if 'smu.edu.sg' in form.email.data:
            user = User(email=form.email.data, role='regular', stars=5, gender='')
            user.set_password(form.password.data)
            db.session.add(user)
            db.session.commit()
            return redirect(url_for('login2'))
        else:
            not_smu_email = True
            return render_template('register2.html', title='Register', form=form, not_smu_email=not_smu_email)
    return render_template('register2.html', title='Register', form=form)



@app.route('/')
@app.route('/index_reg')
@login_required
def index_reg():
    y = 7
    x = 'hello goy'
    z = [1,2,3,4,5,6]
    return render_template('index_reg.html', y=y, x=x, z=z)


@app.route('/findjobs')
@login_required
def findjobs():
    page = request.args.get('page', 1, type=int)
    all_jobs = JobPost.query.filter().order_by(JobPost.timestamp.desc()).paginate(
        page, app.config['POSTS_PER_PAGE'], False)
    next_url = url_for('findjobs', page=all_jobs.next_num) \
        if all_jobs.has_next else None
    prev_url = url_for('findjobs', page=all_jobs.prev_num) \
        if all_jobs.has_prev else None
    return render_template('findjobs.html',all_jobs=all_jobs.items,next_url=next_url,prev_url=prev_url)



@app.route('/applyjob/<id>',methods=['GET','POST'])
@login_required
def applyjob(id):
    form = ApplyJobBtn()
    job = JobPost.query.filter_by(id=id).first_or_404()
    check_appl = Application.query.filter_by(jobpost_id=job.id, user_id=current_user.id).first()
    impressions = job.impressions.split(',')
    # print(impressions)
    if str(current_user.id) not in impressions:
        job.impressions += str(current_user.id) + ','
        db.session.commit()
    # print(JobPost.query.filter_by(id=id).first().impressions)
    #biboobobobobobobobobobo


    applied = False
    if check_appl is not None:
        applied = True

    if form.validate_on_submit():
        if check_appl is None:
            new_application = Application(jobpost_id=job.id, user_id=current_user.id, status='unread')
            db.session.add(new_application)
            db.session.commit()
            return redirect(url_for('myjobs'))

    return render_template('applyjob.html', job=job,form=form,applied=applied)


@app.route('/myjobs',methods=['GET','POST'])
@login_required
def myjobs():
    applications = Application.query.filter_by(user_id=current_user.id).order_by(Application.timestamp.desc())
    myjoblist = []
    for a in applications:
        myjoblist.append([a,JobPost.query.filter_by(id=a.jobpost_id).first()])
    return render_template('myjobs.html', applications=applications, myjoblist=myjoblist)



@app.route('/myprofile/<id>',methods=['GET','POST'])
@login_required
def myprofile(id):
    user = User.query.filter_by(id=current_user.id).first_or_404()
    form = EditProfileForm()
    if form.validate_on_submit() and form.submit.data:
        user.gender = form.gender.data
        user.bio = form.bio.data
        user.phone_no = form.phone_no.data
        db.session.commit()
        return render_template('myprofile.html',user=user,form=form)
    elif request.method == 'GET':
        form.gender.data = user.gender
        form.bio.data = user.bio
        form.phone_no.data = user.phone_no
    return render_template('myprofile.html',user=user,form=form)



@app.route('/index_admin',methods=['GET','POST'])
@login_required
def index_admin():

    if current_user.role != 'admin':
        return 'You are not authorized to access this page.'
    else:

        listingscount = 0
        listingid_list = []
        applicantcount_list = []
        unreadcount = 0
        jobtitle_list = []
        impressions_list = []


        listings = JobPost.query.filter_by(email=current_user.email).order_by(JobPost.timestamp)
        for l in listings:
            listingid_list.append(l.id)
            jobtitle_list.append(l.title)
            listingscount += 1
            print(l.impressions)
            if l.impressions != '':
                impressions_list.append(len(l.impressions.split(',')) - 1)
            else:
                impressions_list.append(0)

        print(impressions_list)

        for id in listingid_list:
            count = 0
            unreadtemp = 0
            applications_for_listing = Application.query.filter_by(jobpost_id=id)
            for a in applications_for_listing:
                count+=1
                if a.status == 'unread':
                    unreadtemp += 1
            applicantcount_list.append(count)
            unreadcount += unreadtemp

        return render_template('index_admin.html', listingscount=listingscount, listingid_list=listingid_list, applicantcount_list=applicantcount_list,
        unreadcount = unreadcount, jobtitle_list=jobtitle_list, impressions_list=impressions_list)



@app.route('/login', methods=['GET', 'POST'])
def login():
    messages = False
    if current_user.is_authenticated:
        return redirect(url_for('index_reg'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is None or not user.check_password(form.password.data):
            # flash('Invalid username or password')
            messages = True
            return render_template('login.html', title='Sign In', form=form, messages=messages)
        login_user(user)
        if user.role == 'regular':
            return redirect(url_for('index_reg'))
        elif user.role == 'admin':
            return redirect(url_for('index_admin'))

    return render_template('login.html', title='Sign In', form=form)


@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index_reg'))



@app.route('/register', methods=['GET', 'POST'])
def register():
    not_smu_email = False
    if current_user.is_authenticated:
        return redirect(url_for('index_reg'))
    form = RegistrationForm()
    if form.validate_on_submit():
        if 'smu.edu.sg' in form.email.data:
            user = User(email=form.email.data, role='regular', stars=5, gender='')
            user.set_password(form.password.data)
            db.session.add(user)
            db.session.commit()
            return redirect(url_for('login'))
        else:
            not_smu_email = True
            return render_template('register.html', title='Register', form=form, not_smu_email=not_smu_email)
    return render_template('register.html', title='Register', form=form)


@app.route('/mylistings',methods=['GET','POST'])
@login_required
def mylistings():
    form = JobPostForm()
    all_jobs = JobPost.query.filter_by(email=current_user.email).order_by(JobPost.timestamp.desc())
    # print(all_jobs)
    if current_user.role != 'admin':
        return 'You are not authorized to access this page.'
    else:
        if form.validate_on_submit():
            jobpost = JobPost(email = current_user.email, title = form.title.data, organization = form.organization.data, description = form.description.data, pay = form.pay.data, pay_frequency = form.pay_frequency.data, impressions = '')
            # start_date = form.start_date.data, end_date = form.end_date.data)
            db.session.add(jobpost)
            db.session.commit()
            # return render_template('mylistings.html', form=form, all_jobs=all_jobs)
            return redirect(url_for('mylistings'))
        else:
            return render_template('mylistings.html', form=form, all_jobs=all_jobs)


@app.route('/editlisting/<id>',methods=['GET','POST'])
@login_required
def editlisting(id):
    form = EditListingForm(prefix="form")
    form2 = DeleteListingBtn(prefix="form2")
    post = JobPost.query.filter_by(id=id).first_or_404()
    changed = False
    if form.validate_on_submit() and form.submit.data:
        post.title = form.title.data
        post.organization = form.organization.data
        post.description = form.description.data
        post.pay = form.pay.data
        post.pay_frequency = form.pay_frequency.data
        db.session.commit()
        changed = True
        return render_template('editlisting.html', post=post, form=form, form2=form2, changed=changed)
    elif form2.validate_on_submit() and form2.submit.data:
        application_delete = Application.query.filter_by(jobpost_id=post.id)
        # print(application_delete)
        for a in application_delete:
            db.session.delete(a)
        db.session.commit()
        db.session.delete(post)
        db.session.commit()
        return redirect(url_for('mylistings'))
    elif request.method =='GET':
        form.title.data = post.title
        form.organization.data = post.organization
        form.description.data = post.description
        form.pay.data = post.pay
        form.pay_frequency.data = post.pay_frequency
    return render_template('editlisting.html', post=post, form=form, form2=form2, changed=changed)

@app.route('/viewapplicants/<id>',methods=['GET','POST'])
@login_required
def viewapplicants(id):
    post = JobPost.query.filter_by(id=id).first_or_404()
    applicants = Application.query.filter_by(jobpost_id=post.id).order_by(Application.timestamp.desc())
    viewapplicants_list = []
    for a in applicants:
        viewapplicants_list.append([a,User.query.filter_by(id=a.user_id).first()])
    return render_template('viewapplicants.html', post=post, applicants=applicants, viewapplicants_list=viewapplicants_list)


@app.route('/viewapplicants/<id>/<user_id>',methods=['GET','POST'])
@login_required
def applicantinfo(id,user_id):
    form1 = AcceptApplicationBtn(prefix="form1")
    form2 = RejectApplicationBtn(prefix="form2")
    post = JobPost.query.filter_by(id=id).first_or_404()
    application = Application.query.filter_by(jobpost_id=post.id,user_id=user_id).first_or_404()
    user = User.query.filter_by(id=user_id).first_or_404()
    if application.status == 'unread':
        application.status = 'pending'
        db.session.commit()
    if form1.validate_on_submit() and form1.submit.data:
        application.status = 'accepted'
        db.session.commit()
        return redirect(url_for('viewapplicants',id=post.id))
    elif form2.validate_on_submit() and form2.submit.data:
        application.status = 'rejected'
        db.session.commit()
        return redirect(url_for('viewapplicants',id=post.id))
    return render_template('applicantinfo.html', post=post, application=application, user=user, form1=form1, form2=form2)
